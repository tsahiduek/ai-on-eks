"use strict";(self.webpackChunkdoeks_website=self.webpackChunkdoeks_website||[]).push([[8563],{14975:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"blueprints/training/GPUs/bionemo","title":"BioNeMo on EKS","description":"Deployment of ML models on EKS requires access to GPUs or Neuron instances. If your deployment isn\'t working, it\u2019s often due to missing access to these resources. Also, some deployment patterns rely on Karpenter autoscaling and static node groups; if nodes aren\'t initializing, check the logs for Karpenter or Node groups to resolve the issue.","source":"@site/docs/blueprints/training/GPUs/bionemo.md","sourceDirName":"blueprints/training/GPUs","slug":"/blueprints/training/GPUs/bionemo","permalink":"/ai-on-eks/docs/blueprints/training/GPUs/bionemo","draft":false,"unlisted":false,"editUrl":"https://github.com/awslabs/ai-on-eks/blob/main/website/docs/blueprints/training/GPUs/bionemo.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"BioNeMo on EKS"},"sidebar":"blueprints","previous":{"title":"Training on EKS","permalink":"/ai-on-eks/docs/category/training-on-eks"},"next":{"title":"Slurm on EKS","permalink":"/ai-on-eks/docs/blueprints/training/GPUs/slinky-slurm"}}');var s=i(74848),o=i(28453),t=i(42450);const a={sidebar_position:1,sidebar_label:"BioNeMo on EKS"},l="BioNeMo on EKS",c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Deploying BioNeMo on Kubernetes",id:"deploying-bionemo-on-kubernetes",level:2},{value:"Clone the repository",id:"clone-the-repository",level:4},{value:"Initialize Terraform",id:"initialize-terraform",level:4},{value:"Run the install script",id:"run-the-install-script",level:4},{value:"Install Kubeflow Training Operator",id:"install-kubeflow-training-operator",level:4},{value:"Run BioNeMo Training jobs",id:"run-bionemo-training-jobs",level:3},{value:"Step1: Initiate the Uniref50 Data Preparation Task",id:"step1-initiate-the-uniref50-data-preparation-task",level:4},{value:"Benefits of Distributed Training:",id:"benefits-of-distributed-training",level:4},{value:"Conclusion",id:"conclusion",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",span:"span",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"bionemo-on-eks",children:"BioNeMo on EKS"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Deployment of ML models on EKS requires access to GPUs or Neuron instances. If your deployment isn't working, it\u2019s often due to missing access to these resources. Also, some deployment patterns rely on Karpenter autoscaling and static node groups; if nodes aren't initializing, check the logs for Karpenter or Node groups to resolve the issue."})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"This blueprint should be considered as experimental and should only be used for proof of concept."})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.nvidia.com/en-us/clara/bionemo/",children:"NVIDIA BioNeMo"})," is a generative AI platform for drug discovery that simplifies and accelerates the training of models using your own data and scaling the deployment of models for drug discovery applications. BioNeMo offers the quickest path to both AI model development and deployment, accelerating the journey to AI-powered drug discovery. It has a growing community of users and contributors, and is actively maintained and developed by the NVIDIA."]}),"\n",(0,s.jsx)(n.p,{children:"Given its containerized nature, BioNeMo finds versatility in deployment across various environments such as Amazon Sagemaker, AWS ParallelCluster, Amazon ECS, and Amazon EKS. This solution, however, zeroes in on the specific deployment of BioNeMo on Amazon EKS."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.em,{children:["Source: ",(0,s.jsx)(n.a,{href:"https://blogs.nvidia.com/blog/bionemo-on-aws-generative-ai-drug-discovery/",children:"https://blogs.nvidia.com/blog/bionemo-on-aws-generative-ai-drug-discovery/"})]})}),"\n",(0,s.jsx)(n.h2,{id:"deploying-bionemo-on-kubernetes",children:"Deploying BioNeMo on Kubernetes"}),"\n",(0,s.jsx)(n.p,{children:"This blueprint leverages three major components for its functionality. The NVIDIA Device Plugin facilitates GPU usage, FSx stores training data, and the Kubeflow Training Operator manages the actual training process."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.kubeflow.org/docs/components/training/",children:(0,s.jsx)(n.strong,{children:"Kubeflow Training Operator"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/NVIDIA/k8s-device-plugin",children:(0,s.jsx)(n.strong,{children:"NVIDIA Device Plugin"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/eks/latest/userguide/fsx-csi.html",children:(0,s.jsx)(n.strong,{children:"FSx for Lustre CSI Driver"})})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In this blueprint, we will deploy an Amazon EKS cluster and execute both a data preparation job and a distributed model training job."}),"\n",(0,s.jsxs)(t.A,{header:(0,s.jsx)(n.h3,{children:(0,s.jsx)(n.span,{children:"Pre-requisites"})}),children:[(0,s.jsx)(n.p,{children:"Ensure that you have installed the following tools on your local machine or the machine you are using to deploy the Terraform blueprint, such as Mac, Windows, or Cloud9 IDE:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html",children:"aws cli"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://Kubernetes.io/docs/tasks/tools/",children:"kubectl"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://learn.hashicorp.com/tutorials/terraform/install-cli",children:"terraform"})}),"\n"]})]}),"\n",(0,s.jsxs)(t.A,{header:(0,s.jsx)(n.h3,{children:(0,s.jsx)(n.span,{children:"Deploy the blueprint"})}),children:[(0,s.jsx)(n.h4,{id:"clone-the-repository",children:"Clone the repository"}),(0,s.jsx)(n.p,{children:"First, clone the repository containing the necessary files for deploying the blueprint. Use the following command in your terminal:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/awslabs/ai-on-eks.git\n"})}),(0,s.jsx)(n.h4,{id:"initialize-terraform",children:"Initialize Terraform"}),(0,s.jsx)(n.p,{children:"Navigate into the directory specific to the blueprint you want to deploy. In this case, we're interested in the BioNeMo blueprint, so navigate to the appropriate directory using the terminal:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ai-on-eks/infra/bionemo\n"})}),(0,s.jsx)(n.h4,{id:"run-the-install-script",children:"Run the install script"}),(0,s.jsxs)(n.p,{children:["Use the provided helper script ",(0,s.jsx)(n.code,{children:"install.sh"})," to run the terraform init and apply commands. By default the script deploys EKS cluster to ",(0,s.jsx)(n.code,{children:"us-west-2"})," region. Update ",(0,s.jsx)(n.code,{children:"blueprint.tfvars"})," to change the region. This is also the time to update any other input variables or make any other changes to the terraform template."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./install .sh\n"})}),(0,s.jsx)(n.p,{children:"Update local kubeconfig so we can access kubernetes cluster"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"aws eks update-kubeconfig --name bionemo-on-eks #or whatever you used for EKS cluster name\n"})}),(0,s.jsx)(n.p,{children:"Since there is no helm chart for Training Operator, we have to manually install the package. If a helm chart gets build by training-operator team, we\nwill incorporate it to the terraform-aws-eks-data-addons repository."}),(0,s.jsx)(n.h4,{id:"install-kubeflow-training-operator",children:"Install Kubeflow Training Operator"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl apply -k "github.com/kubeflow/training-operator/manifests/overlays/standalone?ref=v1.7.0"\n'})})]}),"\n",(0,s.jsxs)(t.A,{header:(0,s.jsx)(n.h3,{children:(0,s.jsx)(n.span,{children:"Verify Deployment"})}),children:[(0,s.jsx)(n.p,{children:"First, lets verify that we have worker nodes running in the cluster."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get nodes\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"NAME                            STATUS   ROLES    AGE   VERSION\nip-100-64-229-12.ec2.internal   Ready    <none>   20m   v1.30.9-eks-5d632ec\nip-100-64-89-235.ec2.internal   Ready    <none>   20m   v1.30.9-eks-5d632ec\n...\n"})}),(0,s.jsx)(n.p,{children:"Next, lets verify all the pods are running."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get pods -A\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"NAMESPACE              NAME                                                              READY   STATUS    RESTARTS      AGE\namazon-guardduty       aws-guardduty-agent-8tn88                                         1/1     Running   2 (21m ago)   21m\namazon-guardduty       aws-guardduty-agent-vsdmc                                         1/1     Running   1 (19m ago)   21m\ningress-nginx          ingress-nginx-controller-6c4dd4ddcc-jz7q4                         1/1     Running   1             19m\nkarpenter              karpenter-64db88475b-nwhbz                                        1/1     Running   0             22m\nkarpenter              karpenter-64db88475b-qp7np                                        1/1     Running   1 (19m ago)   22m\nkube-system            aws-load-balancer-controller-6bdc9bc5cf-c6snh                     1/1     Running   0             19m\nkube-system            aws-load-balancer-controller-6bdc9bc5cf-p5l5f                     1/1     Running   0             19m\nkube-system            aws-node-92266                                                    2/2     Running   0             19m\nkube-system            aws-node-xmpdc                                                    2/2     Running   0             19m\nkube-system            coredns-6885b74c4d-6vj7d                                          1/1     Running   0             19m\nkube-system            coredns-6885b74c4d-j5h74                                          1/1     Running   0             19m\nkube-system            ebs-csi-controller-759d79666-45jnz                                6/6     Running   0             19m\nkube-system            ebs-csi-controller-759d79666-tsrlz                                6/6     Running   0             19m\nkube-system            ebs-csi-node-tfh2t                                                3/3     Running   0             19m\nkube-system            ebs-csi-node-x2j9n                                                3/3     Running   0             19m\nkube-system            fsx-csi-controller-64dcfcbfcb-qtwmp                               4/4     Running   0             19m\nkube-system            fsx-csi-controller-64dcfcbfcb-zr2qk                               4/4     Running   0             19m\nkube-system            fsx-csi-node-78mc6                                                3/3     Running   0             19m\nkube-system            fsx-csi-node-q7947                                                3/3     Running   0             19m\nkube-system            kube-proxy-f45kr                                                  1/1     Running   0             19m\nkube-system            kube-proxy-ffk5d                                                  1/1     Running   0             19m\nkubeflow               training-operator-66d8d6745f-4nr4r                                1/1     Running   0             58s\nnvidia-device-plugin   nvidia-device-plugin-node-feature-discovery-master-695f7b9gk2s6   1/1     Running   0             19m\n...\n"})}),(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Make sure training-operator, nvidia-device-plugin and fsx-csi-controller pods are running and healthy."})})]}),"\n",(0,s.jsx)(n.h3,{id:"run-bionemo-training-jobs",children:"Run BioNeMo Training jobs"}),"\n",(0,s.jsx)(n.p,{children:"Once you've ensured that all components are functioning properly, you can proceed to submit jobs to your clusters."}),"\n",(0,s.jsx)(n.h4,{id:"step1-initiate-the-uniref50-data-preparation-task",children:"Step1: Initiate the Uniref50 Data Preparation Task"}),"\n",(0,s.jsxs)(n.p,{children:["The first task, named the ",(0,s.jsx)(n.code,{children:"uniref50-job.yaml"}),", involves downloading and partitioning the data to enhance processing efficiency. This task specifically retrieves the ",(0,s.jsx)(n.code,{children:"uniref50 dataset"})," and organizes it within the FSx for Lustre Filesystem. This structured layout is designed for training, testing, and validation purposes. You can learn more about the uniref dataset ",(0,s.jsx)(n.a,{href:"https://www.uniprot.org/help/uniref",children:"here"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To execute this job, navigate to the ",(0,s.jsx)(n.code,{children:"examples\\esm1nv"})," directory and deploy the ",(0,s.jsx)(n.code,{children:"uniref50-job.yaml"})," manifest using the following commands:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd examples/training\nkubectl apply -f uniref50-job.yaml\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"It's important to note that this task requires a significant amount of time, typically ranging from 50 to 60 hours."})}),"\n",(0,s.jsxs)(n.p,{children:["Run the below command to look for the pod ",(0,s.jsx)(n.code,{children:"uniref50-download-*"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n"})}),"\n",(0,s.jsx)(n.p,{children:"To verify its progress, examine the logs generated by the corresponding pod:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl logs uniref50-download-xnz42\n\n[NeMo I 2024-02-26 23:02:20 preprocess:289] Download and preprocess of UniRef50 data does not currently use GPU. Workstation or CPU-only instance recommended.\n[NeMo I 2024-02-26 23:02:20 preprocess:115] Data processing can take an hour or more depending on system resources.\n[NeMo I 2024-02-26 23:02:20 preprocess:117] Downloading file from https://ftp.uniprot.org/pub/databases/uniprot/uniref/uniref50/uniref50.fasta.gz...\n[NeMo I 2024-02-26 23:02:20 preprocess:75] Downloading file to /fsx/raw/uniref50.fasta.gz...\n[NeMo I 2024-02-26 23:08:33 preprocess:89] Extracting file to /fsx/raw/uniref50.fasta...\n[NeMo I 2024-02-26 23:12:46 preprocess:311] UniRef50 data processing complete.\n[NeMo I 2024-02-26 23:12:46 preprocess:313] Indexing UniRef50 dataset.\n[NeMo I 2024-02-26 23:16:21 preprocess:319] Writing processed dataset files to /fsx/processed...\n[NeMo I 2024-02-26 23:16:21 preprocess:255] Creating train split...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After finishing this task, the processed dataset will be saved in the ",(0,s.jsx)(n.code,{children:"/fsx/processed"})," directory. Once this is done, we can move forward and start the ",(0,s.jsx)(n.code,{children:"pre-training"})," job by running the following command:"]}),"\n",(0,s.jsx)(n.p,{children:"Following this, we can proceed to execute the pre-training job by running:"}),"\n",(0,s.jsxs)(n.p,{children:["In this PyTorchJob YAML, the command ",(0,s.jsx)(n.code,{children:"python3 -m torch.distributed.run"})," plays a crucial role in orchestrating ",(0,s.jsx)(n.strong,{children:"distributed training"})," across multiple worker pods in your Kubernetes cluster."]}),"\n",(0,s.jsx)(n.p,{children:"It handles the following tasks:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Initializes a distributed backend (e.g., c10d, NCCL) for communication between worker processes.In our example it's using c10d. This is a commonly used distributed backend in PyTorch that can leverage different communication mechanisms like TCP or Infiniband depending on your environment."}),"\n",(0,s.jsx)(n.li,{children:"Sets up environment variables to enable distributed training within your training script."}),"\n",(0,s.jsx)(n.li,{children:"Launches your training script on all worker pods, ensuring each process participates in the distributed training."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd examples/training\nkubectl apply -f esm1nv_pretrain-job.yaml\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Run the below command to look for the pods ",(0,s.jsx)(n.code,{children:"esm1nv-pretraining-worker-*"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"NAME                           READY   STATUS    RESTARTS   AGE\nesm1nv-pretraining-worker-0   1/1     Running   0          11m\nesm1nv-pretraining-worker-1   1/1     Running   0          11m\nesm1nv-pretraining-worker-2   1/1     Running   0          11m\nesm1nv-pretraining-worker-3   1/1     Running   0          11m\nesm1nv-pretraining-worker-4   1/1     Running   0          11m\nesm1nv-pretraining-worker-5   1/1     Running   0          11m\nesm1nv-pretraining-worker-6   1/1     Running   0          11m\nesm1nv-pretraining-worker-7   1/1     Running   0          11m\n"})}),"\n",(0,s.jsxs)(n.p,{children:['We should see 8 pods running. In the pod definition we have specified 8 worker replicas with 1 gpu limit for each. Karpenter provisioned 2 g5.12xlarge instance with 4 GPUs each. Since we set up "nprocPerNode" to "4", each node will be responsible for 4 jobs. For more details around distributed pytorch training see ',(0,s.jsx)(n.a,{href:"https://pytorch.org/docs/stable/distributed.html",children:"pytorch docs"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"This training job can run for at least 3-4 days with g5.12xlarge nodes."})}),"\n",(0,s.jsxs)(n.p,{children:["This configuration utilizes Kubeflow's PyTorch training Custom Resource Definition (CRD). Within this manifest, various parameters are available for customization. For detailed insights into each parameter and guidance on fine-tuning, you can refer to ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/bionemo-framework/latest/notebooks/model_training_esm1nv.html",children:"BioNeMo's documentation"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Based on the Kubeflow training operator documentation, if you do not specify the master replica pod explicitly, the first worker replica pod(worker-0) will be treated as the master pod."})}),"\n",(0,s.jsx)(n.p,{children:"To track the progress of this process, follow these steps:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl logs esm1nv-pretraining-worker-0\n\nEpoch 0:   7%|\u258b         | 73017/1017679 [00:38<08:12, 1918.0%\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, get a snapshot of the GPU status for a specific worker node by running ",(0,s.jsx)(n.code,{children:"nvidia-smi"})," command inside a Kubernetes pod running in that node. If you want to have a more robust observability, you can refer to the ",(0,s.jsx)(n.a,{href:"https://docs.nvidia.com/datacenter/cloud-native/gpu-telemetry/latest/dcgm-exporter.html",children:"DCGM Exporter"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl exec esm1nv-pretraining-worker-0 -- nvidia-smi\nMon Feb 24 18:51:35 2025\n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 535.230.02             Driver Version: 535.230.02   CUDA Version: 12.2     |\n|-----------------------------------------+----------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |\n|                                         |                      |               MIG M. |\n|=========================================+======================+======================|\n|   0  NVIDIA A10G                    On  | 00000000:00:1E.0 Off |                    0 |\n|  0%   33C    P0             112W / 300W |   3032MiB / 23028MiB |     95%      Default |\n|                                         |                      |                  N/A |\n+-----------------------------------------+----------------------+----------------------+\n\n+---------------------------------------------------------------------------------------+\n| Processes:                                                                            |\n|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |\n|        ID   ID                                                             Usage      |\n|=======================================================================================|\n+---------------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.h4,{id:"benefits-of-distributed-training",children:"Benefits of Distributed Training:"}),"\n",(0,s.jsx)(n.p,{children:"By distributing the training workload across multiple GPUs in your worker pods, you can train large models faster by leveraging the combined computational power of all GPUs. Handle larger datasets that might not fit on a single GPU's memory."}),"\n",(0,s.jsx)(n.h4,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(n.p,{children:["BioNeMo stands as a formidable generative AI tool tailored for the realm of drug discovery. In this illustrative example, we took the initiative to pretrain a custom model entirely from scratch, utilizing the extensive uniref50 dataset. However, it's worth noting that BioNeMo offers the flexibility to expedite the process by employing pretrained models directly ",(0,s.jsx)(n.a,{href:"https://catalog.ngc.nvidia.com/orgs/nvidia/teams/clara/containers/bionemo-framework",children:"provided by NVidia"}),". This alternative approach can significantly streamline your workflow while maintaining the robust capabilities of the BioNeMo framework."]}),"\n",(0,s.jsxs)(t.A,{header:(0,s.jsx)(n.h3,{children:(0,s.jsx)(n.span,{children:"Cleanup"})}),children:[(0,s.jsxs)(n.p,{children:["Use the provided helper script ",(0,s.jsx)(n.code,{children:"cleanup.sh"})," to tear down EKS cluster and other AWS resources."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ../../\n./cleanup.sh\n"})})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(96540);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},42450:(e,n,i)=>{i.d(n,{A:()=>m});var r=i(96540),s=i(5556),o=i.n(s),t=i(34164);const a="collapsibleContent_q3kw",l="header_QCEw",c="icon_PckA",d="content_qLC1",h="expanded_iGsi";var p=i(74848);function u({children:e,header:n}){const[i,s]=(0,r.useState)(!1);return(0,p.jsxs)("div",{className:a,children:[(0,p.jsxs)("div",{className:(0,t.A)(l,{[h]:i}),onClick:()=>{s(!i)},children:[n,(0,p.jsx)("span",{className:(0,t.A)(c,{[h]:i}),children:i?"\ud83d\udc47":"\ud83d\udc48"})]}),i&&(0,p.jsx)("div",{className:d,children:e})]})}u.propTypes={children:o().node.isRequired,header:o().node.isRequired};const m=u}}]);
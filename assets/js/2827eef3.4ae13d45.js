"use strict";(self.webpackChunkdoeks_website=self.webpackChunkdoeks_website||[]).push([[1819],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},93947:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"guidance/container-startup-time/accelerate-pull-process/containerd-snapshotter","title":"Using containerd snapshotter","description":"Using SOCI snapshotter","source":"@site/docs/guidance/container-startup-time/2-accelerate-pull-process/12-containerd-snapshotter.md","sourceDirName":"guidance/container-startup-time/2-accelerate-pull-process","slug":"/guidance/container-startup-time/accelerate-pull-process/containerd-snapshotter","permalink":"/ai-on-eks/docs/guidance/container-startup-time/accelerate-pull-process/containerd-snapshotter","draft":false,"unlisted":false,"editUrl":"https://github.com/awslabs/ai-on-eks/blob/main/website/docs/guidance/container-startup-time/2-accelerate-pull-process/12-containerd-snapshotter.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_label":"Using containerd snapshotter"},"sidebar":"guidance","previous":{"title":"Accelerating pull process","permalink":"/ai-on-eks/docs/guidance/container-startup-time/accelerate-pull-process/"},"next":{"title":"Preload container images into data volumes","permalink":"/ai-on-eks/docs/guidance/container-startup-time/accelerate-pull-process/prefecthing-images-on-br"}}');var r=t(74848),o=t(28453);const a={sidebar_label:"Using containerd snapshotter"},i="Using containerd snapshotter",c={},l=[{value:"Using SOCI snapshotter",id:"using-soci-snapshotter",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"using-containerd-snapshotter",children:"Using containerd snapshotter"})}),"\n",(0,r.jsx)(n.h2,{id:"using-soci-snapshotter",children:"Using SOCI snapshotter"}),"\n",(0,r.jsxs)(n.p,{children:["This solution simply relies on the organic improvements of the image pull process by plugging SOCI snapshotter (",(0,r.jsx)(n.a,{href:"https://github.com/awslabs/soci-snapshotter/releases/tag/v0.11.0",children:"v0.11.0"}),"+) into containerd. This is currently isn\u2019t the default in EKS AMIs, but should eventually become one."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Architecture overview"})}),"\n",(0,r.jsxs)(n.p,{children:["There are no architectural changes, as this requires to bootstrap your worker nodes with the snapshotter via ",(0,r.jsx)(n.code,{children:"userData"})," in the relevant Karpenter node classes or launch templates for the non-Karpenter instance provision schemes."]}),"\n",(0,r.jsxs)(n.p,{children:["The new SOCI snapshotter implementation introduces a non-lazy-loading pull mode that that pulls large layers in chunks, allowing them to be pulled faster, similar in idea to the ",(0,r.jsx)(n.a,{href:"https://github.com/containerd/containerd/pull/10177",children:"multipart layer fetch"})," introduced in ",(0,r.jsx)(n.a,{href:"https://github.com/containerd/containerd/releases/tag/v2.1.0",children:"containerd 2.1.0"}),". By using a temporary file buffer instead of in-memory one, SOCI is able to parallelize the layers store and decompression operations, which results in a much faster image pulls (as permitted by hardware limitations)."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation guide"})}),"\n",(0,r.jsx)(n.p,{children:"Below is a schematic implementation of the above changes:"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["For a complete example on how to use SOCI snapshotter, please refer to ",(0,r.jsx)(n.a,{href:"https://builder.aws.com/content/30EkTz8DbMjuqW0eHTQduc5uXi6/accelerate-container-startup-time-on-amazon-eks-with-soci-parallel-mode",children:"this guide"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'apiVersion: karpenter.k8s.aws/v1\nkind: EC2NodeClass\nmetadata:\n  name: soci-snapshotter\nspec:\n  role: KarpenterNodeRole-my-cluster\n  instanceStorePolicy: RAID0\n  subnetSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: my-cluster-private\n  securityGroupSelectorTerms:\n    - tags:\n        karpenter.sh/discovery: my-cluster-private\n  amiSelectorTerms:\n    - alias: al2023@latest\n  userData: |\n    MIME-Version: 1.0\n    Content-Type: multipart/mixed; boundary="//"\n\n    --//\n    Content-Type: text/x-shellscript; charset="us-ascii"\n\n    # 1. Detect the architecture\n    # 2. Download the v0.11.0+ SOCI snapshotter version\n    #    at https://github.com/awslabs/soci-snapshotter/releases/download/...\n    # 3. Configure the snapshotter by creating a config.toml file\n    # 4. Configure the snapshotter service by creating a systemd config file\n    # 5. Enable the snapshotter\n\n    --//\n    Content-Type: application/node.eks.aws\n\n    apiVersion: node.eks.aws/v1alpha1\n    kind: NodeConfig\n    spec:\n      kubelet:\n        config:\n          imageServiceEndpoint: unix:///run/soci-snapshotter-grpc/soci-snapshotter-grpc.sock\n      containerd:\n        config: |\n          [proxy_plugins.soci]\n            type = "snapshot"\n            address = "/run/soci-snapshotter-grpc/soci-snapshotter-grpc.sock"\n            [proxy_plugins.soci.exports]\n              root = "/var/lib/containerd/io.containerd.snapshotter.v1.soci"\n          [plugins."io.containerd.grpc.v1.cri".containerd]\n            snapshotter = "soci"\n            disable_snapshot_annotations = false\n            discard_unpacked_layers = false\n    --//\n\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Main benefits"})}),"\n",(0,r.jsx)(n.p,{children:"The solution provides a direct improvement to the image pull process by plugging a more performant snapshotter into containerd on a worker node."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Additional benefits"})}),"\n",(0,r.jsx)(n.p,{children:"This solution requires no changes to the development process, no additional infrastructure and once enabled by default, no changes in code or configuration."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Trade-offs"})}),"\n",(0,r.jsxs)(n.p,{children:["Before the snapshotter becomes the default, this requires to implement and maintain a ",(0,r.jsx)(n.code,{children:"userData"})," bootstrapping of the worker node described above. Once it becomes the default \u2192 none."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);